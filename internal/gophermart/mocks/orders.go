// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/belamov/ypgo-gophermart/internal/gophermart/services (interfaces: OrdersService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrdersService is a mock of OrdersService interface.
type MockOrdersService struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersServiceMockRecorder
}

// MockOrdersServiceMockRecorder is the mock recorder for MockOrdersService.
type MockOrdersServiceMockRecorder struct {
	mock *MockOrdersService
}

// NewMockOrdersService creates a new mock instance.
func NewMockOrdersService(ctrl *gomock.Controller) *MockOrdersService {
	mock := &MockOrdersService{ctrl: ctrl}
	mock.recorder = &MockOrdersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersService) EXPECT() *MockOrdersServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrdersService) AddOrder(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdersServiceMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrdersService)(nil).AddOrder), arg0, arg1)
}

// ValidateOrderId mocks base method.
func (m *MockOrdersService) ValidateOrderId(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOrderId", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateOrderId indicates an expected call of ValidateOrderId.
func (mr *MockOrdersServiceMockRecorder) ValidateOrderId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOrderId", reflect.TypeOf((*MockOrdersService)(nil).ValidateOrderId), arg0)
}
