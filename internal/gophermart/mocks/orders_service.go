// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/belamov/ypgo-gophermart/internal/gophermart/services (interfaces: OrdersManagerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/belamov/ypgo-gophermart/internal/gophermart/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrdersManagerInterface is a mock of OrdersManagerInterface interface.
type MockOrdersManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersManagerInterfaceMockRecorder
}

// MockOrdersManagerInterfaceMockRecorder is the mock recorder for MockOrdersManagerInterface.
type MockOrdersManagerInterfaceMockRecorder struct {
	mock *MockOrdersManagerInterface
}

// NewMockOrdersManagerInterface creates a new mock instance.
func NewMockOrdersManagerInterface(ctrl *gomock.Controller) *MockOrdersManagerInterface {
	mock := &MockOrdersManagerInterface{ctrl: ctrl}
	mock.recorder = &MockOrdersManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersManagerInterface) EXPECT() *MockOrdersManagerInterfaceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrdersManagerInterface) AddOrder(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdersManagerInterfaceMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrdersManagerInterface)(nil).AddOrder), arg0, arg1)
}

// GetUsersOrders mocks base method.
func (m *MockOrdersManagerInterface) GetUsersOrders(arg0 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersOrders", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersOrders indicates an expected call of GetUsersOrders.
func (mr *MockOrdersManagerInterfaceMockRecorder) GetUsersOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersOrders", reflect.TypeOf((*MockOrdersManagerInterface)(nil).GetUsersOrders), arg0)
}

// ProcessOrder mocks base method.
func (m *MockOrdersManagerInterface) ProcessOrder(arg0 models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessOrder", arg0)
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockOrdersManagerInterfaceMockRecorder) ProcessOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockOrdersManagerInterface)(nil).ProcessOrder), arg0)
}

// ValidateOrderID mocks base method.
func (m *MockOrdersManagerInterface) ValidateOrderID(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOrderID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateOrderID indicates an expected call of ValidateOrderID.
func (mr *MockOrdersManagerInterfaceMockRecorder) ValidateOrderID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOrderID", reflect.TypeOf((*MockOrdersManagerInterface)(nil).ValidateOrderID), arg0)
}
