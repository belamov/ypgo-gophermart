// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/belamov/ypgo-gophermart/internal/gophermart/services (interfaces: BalanceProcessorInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/belamov/ypgo-gophermart/internal/gophermart/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBalanceProcessorInterface is a mock of BalanceProcessorInterface interface.
type MockBalanceProcessorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceProcessorInterfaceMockRecorder
}

// MockBalanceProcessorInterfaceMockRecorder is the mock recorder for MockBalanceProcessorInterface.
type MockBalanceProcessorInterfaceMockRecorder struct {
	mock *MockBalanceProcessorInterface
}

// NewMockBalanceProcessorInterface creates a new mock instance.
func NewMockBalanceProcessorInterface(ctrl *gomock.Controller) *MockBalanceProcessorInterface {
	mock := &MockBalanceProcessorInterface{ctrl: ctrl}
	mock.recorder = &MockBalanceProcessorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceProcessorInterface) EXPECT() *MockBalanceProcessorInterfaceMockRecorder {
	return m.recorder
}

// AddAccrual mocks base method.
func (m *MockBalanceProcessorInterface) AddAccrual(arg0 models.Order, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccrual", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccrual indicates an expected call of AddAccrual.
func (mr *MockBalanceProcessorInterfaceMockRecorder) AddAccrual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccrual", reflect.TypeOf((*MockBalanceProcessorInterface)(nil).AddAccrual), arg0, arg1)
}

// GetUserTotalAccrualAmount mocks base method.
func (m *MockBalanceProcessorInterface) GetUserTotalAccrualAmount(arg0 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTotalAccrualAmount", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTotalAccrualAmount indicates an expected call of GetUserTotalAccrualAmount.
func (mr *MockBalanceProcessorInterfaceMockRecorder) GetUserTotalAccrualAmount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTotalAccrualAmount", reflect.TypeOf((*MockBalanceProcessorInterface)(nil).GetUserTotalAccrualAmount), arg0)
}

// GetUserTotalWithdrawAmount mocks base method.
func (m *MockBalanceProcessorInterface) GetUserTotalWithdrawAmount(arg0 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTotalWithdrawAmount", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTotalWithdrawAmount indicates an expected call of GetUserTotalWithdrawAmount.
func (mr *MockBalanceProcessorInterfaceMockRecorder) GetUserTotalWithdrawAmount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTotalWithdrawAmount", reflect.TypeOf((*MockBalanceProcessorInterface)(nil).GetUserTotalWithdrawAmount), arg0)
}

// GetUserWithdrawals mocks base method.
func (m *MockBalanceProcessorInterface) GetUserWithdrawals(arg0 int) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", arg0)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockBalanceProcessorInterfaceMockRecorder) GetUserWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockBalanceProcessorInterface)(nil).GetUserWithdrawals), arg0)
}

// RegisterWithdraw mocks base method.
func (m *MockBalanceProcessorInterface) RegisterWithdraw(arg0, arg1 int, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWithdraw", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterWithdraw indicates an expected call of RegisterWithdraw.
func (mr *MockBalanceProcessorInterfaceMockRecorder) RegisterWithdraw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWithdraw", reflect.TypeOf((*MockBalanceProcessorInterface)(nil).RegisterWithdraw), arg0, arg1, arg2)
}
